interface ReservationData {
    code?: string; // Optional, generated by backend
    user_name: string;
    user_email: string;
    user_phone: string;
    vehicle_type_id: number;
    vehicle_plate: string;
    vehicle_model: string;
    payment_method_id?: number; // Added missing field
    status?: string; // Optional, defaults to 'active'
    start_time: string; // ISO string or timestamp
    end_time: string;   // ISO string or timestamp
    created_at?: string; // Optional, handled by backend
    updated_at?: string; // Optional, handled by backend
    language?: string; // Added for language support
}

interface ReservationResponse {
    id: number;
    code: string;
    user_name: string;
    user_email: string;
    user_phone: string;
    vehicle_type_id: number;
    vehicle_plate: string;
    vehicle_model: string;
    status: string;
    start_time: string;
    end_time: string;
    created_at: string;
    updated_at: string;
}

export async function createReservation(
    data: ReservationData
): Promise<ReservationResponse & { url: string; session_id: string }> {
    const apiUrl = process.env.NEXT_PUBLIC_API_URL;
    const res = await fetch(`${apiUrl}/api/reservations`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
    });
    if (!res.ok) throw new Error('Error creating reservation');
    // El backend retorna { reservation: { ... } }
    const json = await res.json();
    if (!json.reservation || !json.reservation.url) {
        throw new Error('Invalid reservation response');
    }
    return json.reservation;
}
